.data
prompt:     .asciiz "Enter a positive integer n: "
result_msg: .asciiz "The nth Fibonacci number is: "
newline:    .asciiz "\n"

.text
.globl main

main:
    # Prompt for the positive integer n
    li      $v0, 4              # syscall for print string
    la      $a0, prompt         # load address of prompt
    syscall

    # Read the integer n
    li      $v0, 5              # syscall for read integer
    syscall
    move    $t0, $v0            # move n to $t0

    # Check if n is 0
    beqz    $t0, print_zero      # if n == 0, go to print_zero

    # Initialize Fibonacci variables
    li      $t1, 0               # fib0 = 0
    li      $t2, 1               # fib1 = 1

    # If n == 1, we can directly return fib1
    beq     $t0, 1, print_fib1   # if n == 1, go to print_fib1

    # Loop to calculate the nth Fibonacci number
    li      $t3, 2               # i = 2 (starting from the 2nd Fibonacci number)
fib_loop:
    bgt     $t3, $t0, print_fib1 # if i > n, go to print_fib1

    # Calculate the next Fibonacci number
    add     $t4, $t1, $t2        # temp = fib0 + fib1
    move    $t1, $t2             # fib0 = fib1
    move    $t2, $t4             # fib1 = temp (new fib1)

    # Increment i
    addi    $t3, $t3, 1          # i++
    j       fib_loop             # repeat the loop

print_fib1:
    # Print the nth Fibonacci number (which is in fib1)
    li      $v0, 4               # syscall for print string
    la      $a0, result_msg      # load address of result message
    syscall

    move    $a0, $t2             # move the nth Fibonacci number to $a0 for printing
    li      $v0, 1               # syscall for print integer
    syscall

    # Print a newline
    li      $v0, 4               # syscall for print string
    la      $a0, newline          # load address of newline
    syscall

    # Exit the program
    li      $v0, 10              # syscall for exit
    syscall

print_zero:
    # If n is 0, print 0
    li      $v0, 4               # syscall for print string
    la      $a0, result_msg      # load address of result message
    syscall

    li      $a0, 0                # move 0 to $a0 for printing
    li      $v0, 1                # syscall for print integer
    syscall

    # Print a newline
    li      $v0, 4               # syscall for print string
    la      $a0, newline          # load address of newline
    syscall

    # Exit the program
    li      $v0, 10              # syscall for exit
    syscall